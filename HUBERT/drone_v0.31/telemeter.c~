#include "telemeter.h"
#include "task.h"

/* range : 300 à 5000 (mm). If distance is lower/higher, values stick to the extremes. */
static inline uint8_t prvTelemeterIsDistValid( const uint32_t * const pulDistance )
{
uint8_t ucHighMarginMm = 500;
uint8_t ucLowMarginMm = 50;

	if( ( *pulDistance > 5000 + ucHighMarginMm )
		|| ( *pulDistance < 300 + ucLowMarginMm ) )
	{
		ulDebugMsg( xTaskGetTickCount(), "ERROR", 
			pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter",
			"prvTelemeterIsDistValid()", "Data outside of valid range !" );
			
		return 0;
	}
	else
	{
		ulDebugMsg( xTaskGetTickCount(), "INFO", 
			pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter",
			 "prvTelemeterIsDistValid()", "Data inside valid range !" );
			
		return 1;
	}
}

inline void vTelemeterInit( void )
{
	ulDebugMsg( xTaskGetTickCount(), "TODO", ( signed char * ) "-", 0, "telemeter", "vTelemeterInit()", "Does nothing ATM" );
}

inline uint8_t ucTelemeterInitTest( void )
{
	ulDebugMsg( xTaskGetTickCount(), "TODO", ( signed char * ) "-", 0, "telemeter", "ucTelemeterInitTest()", "Does nothing ATM" );

	return 0;
}

inline uint8_t ucTelemeterTest( void )
{
	ulDebugMsg( xTaskGetTickCount(), "TODO", pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter", "ucTelemeterTest()", "Does nothing ATM" );

	return 0;
}

inline uint32_t ulTelemeterGetDist( const enum telemeterId eTelemeterId )
{
	ulDebugMsg( xTaskGetTickCount(), "TODO", pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter", "ulTelemeterGetDist()", "Does nothing ATM" );

	return 0;
}

/* TLM_NONE is not considered a valid telemeterId */
inline uint8_t ucTelemeterIsIdValid( const enum telemeterId eTelemeterId )
{
	ulDebugMsg( xTaskGetTickCount(), "TODO", pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter", "ucTelemeterIsIdValid()", "Does nothing ATM" );

	if( ( eTelemeterId == TLM_FRT )
			|| ( eTelemeterId == TLM_LFT_FRT ) || ( eTelemeterId == TLM_LFT_BCK )
			|| ( eTelemeterId == TLM_RGT_FRT ) || ( eTelemeterId == TLM_RGT_BCK )
			|| ( eTelemeterId == TLM_BCK ) || ( eTelemeterId == TLM_BOT ) )
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

/* Doesn't tell which values are invalid, return 1 if every field is valid,
0 otherwise. */
inline uint8_t ucTelemeterIsDataValid( const struct telemeterData * const pxTelemeterData )
{
	if( prvTelemeterIsDistValid( &( pxTelemeterData->ulFrontDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulLeftFrontDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulLeftBackDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulRightFrontDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulRightBackDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulBackDist ) )
			&& prvTelemeterIsDistValid( &( pxTelemeterData->ulBottomDist ) ) )
	{
		ulDebugMsg( xTaskGetTickCount(), "INFO", pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter", "ucTelemeterIsDataValid()", "Data valid" );
		return 1;
	}
	else
	{
		ulDebugMsg( xTaskGetTickCount(), "ERROR", pcTaskGetTaskName( NULL ), uxTaskPriorityGet( NULL ), "telemeter", "ucTelemeterIsDataValid()", "Data invalid" );
		return 0;
	}
}

/* Updates each telemeter measurement */
inline void vTelemeterGetData( struct telemeterData * const pxNewTlmData )
{
	pxNewTlmData->ulFrontDist		= ulTelemeterGetDist( TLM_FRT );
	pxNewTlmData->ulLeftFrontDist	= ulTelemeterGetDist( TLM_LFT_FRT );
	pxNewTlmData->ulLeftBackDist	= ulTelemeterGetDist( TLM_LFT_BCK );
	pxNewTlmData->ulRightFrontDist	= ulTelemeterGetDist( TLM_RGT_FRT );
	pxNewTlmData->ulRightBackDist	= ulTelemeterGetDist( TLM_RGT_BCK );
	pxNewTlmData->ulBackDist		= ulTelemeterGetDist( TLM_BCK );
	pxNewTlmData->ulBottomDist		= ulTelemeterGetDist( TLM_BOT );
}
